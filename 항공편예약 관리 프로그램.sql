-- 항공편예약 시스템

-- 승객정보테이블
CREATE TABLE CUSTOMER
(
    NO CHAR(7), -- pk
    NAME VARCHAR2(20) NOT NULL, -- 이름
    BIRTH VARCHAR2(20), -- 생일(ex)20020707)
    PHONE VARCHAR2(15), -- uk 휴대폰번호
    REGIST DATE NOT NULL,   -- 등록날짜 SYSDATE 
    RIGHT NUMBER(1),    -- 권한
    ID VARCHAR2(20) NOT NULL,   -- uk 아이디
    PW VARCHAR2(20) NOT NULL,   -- PW 패스워드
    C_COUNT NUMBER(3) DEFAULT 0   -- 예매 합계(booking테이블에서 insert시 계수.)
);

ALTER TABLE CUSTOMER ADD CONSTRAINT CUSTOMER_NO_PK PRIMARY KEY(NO);
ALTER TABLE CUSTOMER ADD CONSTRAINT CUSTOMER_PHONE_UQ UNIQUE(PHONE);
ALTER TABLE CUSTOMER ADD CONSTRAINT CUSTOMER_ID_UQ UNIQUE(ID);

-- 기존 데이터 NO에 이미 0001부터의 입력값이 존재해 START를 10부터 적용. --
CREATE SEQUENCE CUSTOMER_SEQ
START WITH 10
INCREMENT BY 1
MAXVALUE 9999
MINVALUE 1;

-- BOOKING테이블 INSERT시, COUNT 1씩 증가하는 TRG. --
CREATE OR REPLACE TRIGGER COUNT_UP_TRG
    AFTER INSERT ON BOOKING
    FOR EACH ROW
BEGIN
    UPDATE CUSTOMER SET C_COUNT=C_COUNT+1;
END;
/

-- BOOKING테이블 INSERT시, COUNT 1씩 감소하는 TRG. --
CREATE OR REPLACE TRIGGER COUNT_DOWN_TRG
    AFTER DELETE ON BOOKING
    FOR EACH ROW
BEGIN
    UPDATE CUSTOMER SET C_COUNT=C_COUNT-1;
END;
/


-- 여객기정보 테이블
DROP TABLE PLANE;
CREATE TABLE PLANE(
NO CHAR(5),                  --PK
NAME VARCHAR2(15) NOT NULL,  --기종
ROWX NUMBER(2) NOT NULL,     --좌석의 행 개수
COLY NUMBER(2) NOT NULL,     --좌석의 열 개수
SEATS NUMBER(3)              --총 좌석 개수 트리거로 생성
);
ALTER TABLE PLANE ADD CONSTRAINT PLANE_NO_PK PRIMARY KEY(NO);

-- 여객기 자동 생성 시퀀스
CREATE SEQUENCE PLANE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

-- 여객기코드 자동 생성 트리거
CREATE OR REPLACE TRIGGER PLANE_NO_TRG
BEFORE INSERT ON PLANE
FOR EACH ROW
DECLARE
    V_MAX_NO NUMBER;
BEGIN
    SELECT NVL(MAX(TO_NUMBER(NO)), 0) + 1 INTO V_MAX_NO FROM PLANE;
    :NEW.NO := LPAD(V_MAX_NO, 5, '0');
END;
/



-- 나라별 항공 정보 테이블
DROP TABLE COUNTRY;
CREATE TABLE COUNTRY(
NO CHAR(5),                      --PK
NAME VARCHAR2(15) NOT NULL,      --이름(UK, 중복불가)
DISTANCE NUMBER(5) NOT NULL,     --거리
HOUR NUMBER(4,2)                 --소요시간
);
ALTER TABLE COUNTRY ADD CONSTRAINT COUNTRY_NO_PK PRIMARY KEY(NO);
ALTER TABLE COUNTRY ADD CONSTRAINT COUNTRY_NAME_UK UNIQUE(NAME);
--ALTER TABLE COUNTRY MODIFY (NAME VARCHAR2(15));

-- 비행거리만큼 비행 소요 시간 계산해주는 트리거
CREATE OR REPLACE TRIGGER COUNTRY_HOUR_TRG
BEFORE INSERT OR UPDATE ON COUNTRY
FOR EACH ROW
BEGIN
    -- 평균 속도 900 km/h
    :NEW.HOUR := :NEW.DISTANCE / 900;
END;
/

-- 여행국 코드 시퀀스 생성
CREATE SEQUENCE COUNTRY_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE;

-- 여행국 코드 자동 생성 트리거
CREATE OR REPLACE TRIGGER COUNTRY_NO_TRG
BEFORE INSERT ON COUNTRY
FOR EACH ROW
BEGIN
    IF :NEW.NO IS NULL THEN
        :NEW.NO := LPAD(COUNTRY_SEQ.NEXTVAL, 5, '0');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER COUNTRY_NO_TRG
BEFORE INSERT ON COUNTRY
FOR EACH ROW
DECLARE
    V_MAX_NO NUMBER;
BEGIN
    SELECT NVL(MAX(TO_NUMBER(NO)), 0) + 1 INTO V_MAX_NO FROM COUNTRY;
    :NEW.NO := LPAD(V_MAX_NO, 5, '0');
END;
/



SELECT TRIGGER_NAME, STATUS FROM USER_TRIGGERS WHERE TABLE_NAME = 'COUNTRY';

INSERT INTO COUNTRY (NAME, DISTANCE) VALUES ('한국', 2700);
SELECT * FROM COUNTRY;
COMMIT;



-- 항공편 테이블
CREATE TABLE FLIGHT(        --항공편
	NO CHAR(5),                              --PK
	PLANE_NO CHAR(5) NOT NULL,               --비행기 기종 NO FK
	DEPARTURE_COUNTRY_NO CHAR(5) DEFAULT TO_CHAR(1,'0000'), --DEFALUT KOREA,   --출발 국가
	ARRIVAL_COUNTRY_NO CHAR(5) NOT NULL,     --도착 국가
	PRICE NUMBER(8),                         --가격
	DEPARTURE_HOUR DATE NOT NULL,            --출발 시간
	ARRIVAL_HOUR DATE                       --도착 시간
);

ALTER TABLE FLIGHT ADD CONSTRAINT FLIGHT_NO_PK PRIMARY KEY(NO);
ALTER TABLE FLIGHT ADD CONSTRAINT FLIGHT_PLANE_NO_FK FOREIGN KEY(PLANE_NO) REFERENCES PLANE(NO) ON DELETE CASCADE;
ALTER TABLE FLIGHT ADD CONSTRAINT FLIGHT_DEPARTURE_COUNTRY_NO_FK FOREIGN KEY(DEPARTURE_COUNTRY_NO) REFERENCES COUNTRY(NO) ON DELETE SET NULL;
ALTER TABLE FLIGHT ADD CONSTRAINT FLIGHT_ARRIVAL_COUNTRY_NO_FK FOREIGN KEY(ARRIVAL_COUNTRY_NO) REFERENCES COUNTRY(NO) ON DELETE SET NULL;

--시간대비 가격 자동 계산 트리거
CREATE OR REPLACE  TRIGGER FLIGHT_PRICE_TIRRGER
BEFORE INSERT ON FLIGHT
FOR EACH ROW
DECLARE
    SHOUR NUMBER(4.2);
BEGIN
    SELECT HOUR INTO SHOUR FROM COUNTRY C WHERE C.NO = :NEW.ARRIVAL_COUNTRY_NO;
    :NEW.PRICE := SHOUR * 150000;
END;
/

--시간대비 가격 자동 계산 트리거(UPDATE 용)
CREATE OR REPLACE TRIGGER FLIGHT_PRICE_TIRRGER2
BEFORE UPDATE ON FLIGHT
FOR EACH ROW
DECLARE
    SHOUR NUMBER(4.2);
BEGIN
    SELECT HOUR INTO SHOUR FROM COUNTRY C WHERE C.NO = :NEW.ARRIVAL_COUNTRY_NO;
    :NEW.PRICE := SHOUR * 150000;
END;
/

--시간대비 도착시간 자동 계산 트리거
CREATE OR REPLACE TRIGGER FLIGHT_ARRIVAL_TIRRGER
BEFORE INSERT ON FLIGHT
FOR EACH ROW
DECLARE
    SHOUR COUNTRY.HOUR%TYPE;
BEGIN
    SELECT HOUR INTO SHOUR FROM COUNTRY C WHERE C.NO = :NEW.ARRIVAL_COUNTRY_NO;
    :NEW.ARRIVAL_HOUR := TO_DATE(:NEW.DEPARTURE_HOUR + (INTERVAL '?' DAY));
END;
/

--시간대비 도착시간 자동 계산 트리거(UPDATE 용) 
DROP TRIGGER FLIGHT_ARRIVAL_TIRRGER;

CREATE OR REPLACE TRIGGER FLIGHT_ARRIVAL_TIRRGER2
BEFORE UPDATE ON FLIGHT
FOR EACH ROW
DECLARE
    SHOUR NUMBER(4.2);
    ARRIVAL DATE;
BEGIN
    SELECT HOUR INTO SHOUR FROM COUNTRY C WHERE C.NO = :NEW.ARRIVAL_COUNTRY_NO;
    :NEW.ARRIVAL_HOUR := TO_DATE(:NEW.DEPARTURE_HOUR + (INTERVAL '?' DAY));
END;
/



-- 예약정보 테이블
DROP TABLE BOOKING;
CREATE TABLE BOOKING(
NO CHAR(7),                         --PK
GROUP_NO CHAR(6) NOT NULL,          --예매 그룹 NO
CUSTOMER_NO CHAR(7) NOT NULL,       --고객 NO FK
FLIGHT_NO CHAR(5) NOT NULL,         --항공편 NO FK
CODE CHAR(20),                      --CODE NO-CUSTOMER_NO-FLIGHT_NO 로 생성 TRIGGER
SEAT VARCHAR2(4) NOT NULL,          --좌석
SEATS_NO CHAR(6),                   --입력된 좌석에 맞춰서 좌석번호 가져오게. FK TRGGER
BOOKING_DATE DATE NOT NULL          --예매 날짜
);
INSERT INTO BOOKING(NO,SEAT,BOOKING_DATE) VALUES('0000002','A02',SYSDATE);
SELECT * FROM BOOKING;
ALTER TABLE BOOKING ADD CONSTRAINT BOOKING_NO_PK PRIMARY KEY(NO);
ALTER TABLE BOOKING ADD CONSTRAINT BOOKING_SEATS_NO_FK FOREIGN KEY(SEATS_NO) REFERENCES SEATS(NO) ON DELETE CASCADE;
ALTER TABLE BOOKING ADD CONSTRAINT BOOKING_CUSTOMER_NO_FK FOREIGN KEY(CUSTOMER_NO) REFERENCES CUSTOMER(NO) ON DELETE CASCADE;
ALTER TABLE BOOKING ADD CONSTRAINT BOOKING_FLIGHT_NO_FK FOREIGN KEY(FLIGHT_NO) REFERENCES FLIGHT(NO) ON DELETE CASCADE;

-- 비행기 기종별 좌석 테이블
DROP TABLE SEATS;
CREATE TABLE SEATS(          --비행기 기종별 좌석정보 
NO CHAR(6),                  --PK   
PLANE_NO CHAR(5),            --비행기 기종 NO  FK
ROWX VARCHAR2(2) NOT NULL,   --행 코드 01~99
COLY VARCHAR2(2) NOT NULL    --열 코드 A...Z 
);
ALTER TABLE SEATS ADD CONSTRAINT SEATS_NO_PK PRIMARY KEY(NO);
ALTER TABLE SEATS ADD CONSTRAINT SEATS_PLANE_NO_FK FOREIGN KEY(PLANE_NO) REFERENCES PLANE(NO) ON DELETE CASCADE;

-----------------------------------------------------------------------------------------------------------------------------------------------------TRG
--DELETE FROM Booking WHERE GROUP_NO = TO_CHAR(?,'FM0000000')

--BOOKING 입력또는 업데이트시 SEAT에 맞춰서 SEATS_NO를 업데이트
CREATE OR REPLACE TRIGGER BOOKING_SEATS_TRG
BEFORE INSERT OR UPDATE
ON BOOKING
FOR EACH ROW
DECLARE
SNO CHAR(6);
BEGIN
SELECT NO INTO SNO FROM SEATS WHERE ROWX=SUBSTR(:NEW.SEAT,1,1) AND COLY=SUBSTR(:NEW.SEAT,2);
:NEW.SEATS_NO:=SNO;
END;
/

--BOOKING INSERT 시 코드 자동 생성
CREATE OR REPLACE TRIGGER BOOKING_INSERT_TRG
BEFORE INSERT
ON BOOKING
FOR EACH ROW
BEGIN
:NEW.CODE:=:NEW.GROUP_NO||'-'||:NEW.CUSTOMER_NO||'-'||:NEW.FLIGHT_NO;
END;
/

--PLANE 추가시에 SEATS TABLE 자동으로 추가
CREATE OR REPLACE TRIGGER PLANE_INSERT_TRG
AFTER INSERT 
ON PLANE
FOR EACH ROW
BEGIN
FOR i IN ASCII('A') .. (ASCII('A') + :NEW.ROWX - 1) LOOP--FOR IN 구문으로 SEATS에 값 추가 ASCCII 코드를 사용해서 A...Z 반환
FOR j IN 1 .. :NEW.COLY LOOP
INSERT INTO SEATS VALUES (TO_CHAR((SELECT NVL(MAX(NO),0)+1 FROM SEATS),'FM000000'),:NEW.NO, CHR(i), TO_CHAR(j,'FM00'));
END LOOP;
END LOOP;
END;
/


--PLANE 테이블 INSERT시 X,Y에 맞춰서 SEATS 개수추가
CREATE OR REPLACE TRIGGER PLANE_BEFORE_INSERT_TRG
BEFORE INSERT 
ON PLANE
FOR EACH ROW
BEGIN
:NEW.SEATS := :NEW.ROWX*:NEW.COLY;
END;
/


CREATE OR REPLACE TRIGGER BOOKING_DELETE_SEATS_TRG
AFTER DELETE ON BOOKING
FOR EACH ROW
BEGIN
    -- DELETE된 예약 정보에 따라 SEATS 테이블에서 해당 좌석을 활성화
    UPDATE SEATS
    SET PLANE_NO = :OLD.FLIGHT_NO -- 예매했던 비행기 정보로 좌석 복구
    WHERE NO = :OLD.SEATS_NO;
END;
/


--나라별 여객기정보
ALTER TABLE PLANE ADD COUNTRY_NO CHAR(5);
ALTER TABLE PLANE ADD CONSTRAINT PLANE_COUNTRY_FK FOREIGN KEY (COUNTRY_NO) REFERENCES COUNTRY(NO);

SELECT C.NO AS COUNTRY_NO, C.NAME AS COUNTRY_NAME, P.NO AS PLANE_NO, P.NAME AS PLANE_NAME
FROM COUNTRY C
JOIN PLANE P ON C.NO = P.COUNTRY_NO;
